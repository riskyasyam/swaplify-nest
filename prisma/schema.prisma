// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id          Int       @id @default(autoincrement())
  email       String?    @unique
  authSub     String    @unique    // sub dari PrimeAuth
  displayName String?
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())

  subscriptions UserSubscription[]
  usages        UsageDaily[]
  FusionJob     FusionJob[]
}

model Plan {
  id             Int      @id @default(autoincrement())
  code           String   @unique
  name           String
  maxProcessors  Int
  requestsPerDay Int
  priceCents     Int      @default(0)
  createdAt      DateTime @default(now())

  subscriptions UserSubscription[]
}

model UserSubscription {
  id        Int       @id @default(autoincrement())
  userId    Int
  planId    Int
  isActive  Boolean   @default(true)
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  expiresAt DateTime?

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])

  @@index([userId, isActive])
}

model UsageDaily {
  id     Int      @id @default(autoincrement())
  userId Int
  date   DateTime
  used   Int      @default(0)

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model FusionJob {
  id           String    @id @default(cuid())
  userId       Int
  status       JobStatus @default(PENDING)
  sourceKey    String?
  targetKey    String?
  outputKey    String?
  errorMessage String?
  processors   Int       @default(1)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum JobStatus {
  PENDING
  QUEUED
  PROCESSING
  DONE
  FAILED
}